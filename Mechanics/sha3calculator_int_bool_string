pragma solidity 0.4.11;

//Contract is meant to be used in calculations of hashes for blind auction contracts.
//It accepts integer, boolean and string in this particular order and packages them interaction
//sha3() function that is native to solidity.

//Contract is hosted on ropsten testnet at 0xf9e1b3546790b8b684053BF22E53BbD5ADa55730

/**JSON iterface of the contract is: [ { "constant": false, "inputs": [ { "name": "_integer", "type": "int256" }, { "name": "_boolean", "type": "bool" }, { "name": "_characters", "type": "string" } ], "name": "hashIt", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "latestHashingOperationIdentifier", "outputs": [ { "name": "", "type": "uint256", "value": "1" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" } ], "name": "hashing", "outputs": [ { "name": "integer", "type": "int256", "value": "1" }, { "name": "boolean", "type": "bool", "value": true }, { "name": "characters", "type": "string", "value": "secret" }, { "name": "hashingresult", "type": "bytes32", "value": "0xfd3a44e8cd613ba129e333b882d397604af73df0f54c7a4039ef538fde062120" } ], "payable": false, "type": "function" }, { "inputs": [ { "name": "startingIdentifier", "type": "uint256", "index": 0, "typeShort": "uint", "bits": "256", "displayName": "starting Identifier", "template": "elements_input_uint", "value": "0" } ], "payable": false, "type": "constructor" } ]

contract sha3HashCalculatorIntBoolString{
  struct result{
    int integer;
    bool boolean;
    string characters;
    bytes32 hashingresult;
  }
  uint256 public latestHashingOperationIdentifier;
  mapping(uint256 => result[]) public hashing;

  function sha3HashCalculatorIntBoolString(uint256 startingIdentifier){
    latestHashingOperationIdentifier = startingIdentifier;
  }

  function hashIt(int _integer, bool _boolean, string _characters){
    latestHashingOperationIdentifier += 1;
    hashing[latestHashingOperationIdentifier].push(result({
      integer: _integer,
      boolean: _boolean,
      characters: _characters,
      hashingresult: sha3(_integer, _boolean, _characters)
    }));
  }
}
