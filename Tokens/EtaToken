//This is needend in order to specify the version of solidity used. Without it the code won't compile.
pragma solidity 0.4.2;

//This contract specifies the owner and main manager of the currency.
//It also defines the transfer of ownership if required.
contract owned{
  address public owner;

  function owned(){
    owner = msg.sender;
  }

  modifier onlyOwner{
    if(msg.sender != owner) throw;
    _;
  }

  function transferOwnership (address newOwner) onlyOwner{
    owner = newOwner;
  }
}

//Add the capability to the contract to mint its own tokens if a user wants to buy more than currently available.

//Add the ability to decide whether we want to allow owner account into the accountRepository or not.
  //Bool that automatically disables write into rhe accountRepository capability.


//myEtaToken inherits proprieties from "owned".
contract myEtaToken is owned{
    //This maps addresses to amount of tokens they own.
    mapping (address => uint256) public balanceOf;
    //This maps addresses with permissions if they can transfer and receive funds or not.
    mapping (address => bool) public frozenAccount;
    //This maps an account as present account in the contract; the account owns or has owned tokens.
    mapping (uint256 => address) public accountRepository;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 totalSupply;
    uint256 public sellPrice;
    uint256 public buyPrice;
    uint256 public minTransferAmount;
    uint256 public accountNumber;
    uint minAccountBalance;
    //This is only used once at the deployement to specify if we want to present the owner in the account repository or not.
    bool hideOwner;

    //Events are empty functions that are called to keep track of activities happening in the contract.
    //They have to start with capital letter.
    event Transfer(address indexed from, address indexed to, uint256 value);
    event FrozenFunds(address target, bool frozen);

    //This fuction is called when deploying contract.
    function myEtaToken(uint256 initialOwnerBalance, uint256 initialContractBalance; string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter, uint256 minStartTransferAmount, bool omitOwner) {
        //This grants the owner of the contract the "initialOwnerBalance" of tokens.
        balanceOf[msg.sender] = initialOwnerBalance;
        //This mints tokens to the contract address in order to streamline the deployement of the contract.
        balanceOf[this] = initialContractBalance;
        //Sets the name for display purposes.
        name = tokenName;
        //Sets the amount of decimals used by this token.
        decimals = decimalUnits;
        //Sets the symbol for display purposes.
        symbol = tokenSymbol;
        //Sets owner of the contract.
        if(centralMinter != 0) owner = centralMinter;
        //Variable that saves total value of all tokens in order to be able to control and manage quantity and value of currency.
        totalSupply = initialOwnerBalance + initialContractBalance;
        //Defines the beginning of the account repository.
        accountNumber = 0;
        //Sets the initial minimum amount of tokens that can be transfered in the contract.
        minTransferAmount = minStartTransferAmount;
        //Lets the contract know if we want to hide the owner in the account repository or not.
        hideOwner = omitOwner;
    }

        //The following enables transferring of coins between peers.
        function transfer(address _to, uint256 _value){
            //Prevents flooding attacks by sending very small amount of tokens to random addresses.
            if(_value < minTransferAmount) throw;
            //Pay for all the fees in advance.
            if(msg.sender.balance < minAccountBalance){
              //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
              if(!msg.sender.send(minAccountBalance - msg.sender.balance)) throw;
            }
            //Pay for all the fees in advance.
            if(_to.balance < minAccountBalance){
              //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
              if(!_to.send(minAccountBalance - _to.balance)) throw;
            }
            //This throws the transfer if sender's account is frozen.
            if (frozenAccount[msg.sender]) throw;
            //Prevents sending tokens to frozen accounts.
            if (frozenAccount[_to]) throw;
            //This checks if sender has more funds than he wishes to send and if he wants to send amount
            //low enough that it doesn't result in overflow(value jumping back to 0).
            if(balanceOf[msg.sender] <= _value || balanceOf[_to] + _value < balanceOf[_to]){
                //"return" could also be used in stead of "throw", but throw makes sure that all of the changes initiated
                //by the contract prior to it are reversed. It unfortunately uses more gas than return.
                throw;
            }

            //This substract the token number from sender and adds it to receiver.
            balanceOf[msg.sender] -= _value;
            balanceOf[_to] += _value;

            //Build the library of participating enitities.
            //Makes sure we don't have duplicate addresses in the repository.
            bool isNotAnExistingAccount = true;
            //Following line allows us to omit the owner of the contract form the account repository.
            if(msg.sender == owner) isNotAnExistingAccount = !hideOwner;
            for(uint i=0; i<accountNumber+1; i++){
              if(accountRepository[i]==msg.sender){
                isNotAnExistingAccount = false;
              }
            }
            if(isNotAnExistingAccount){
              accountRepository[accountNumber+1] = msg.sender;
              accountNumber+=1;
            }
            isNotAnExistingAccount = true;//Following line allows us to omit the owner of the contract form the account repository.
            if(_to == owner) isNotAnExistingAccount = !hideOwner;
            for(uint j=0; j<accountNumber+1; j++){
              if(accountRepository[j]==_to){
                isNotAnExistingAccount = false;
              }
            }
            if(isNotAnExistingAccount){
              accountRepository[accountNumber+1] = _to;
              accountNumber+=1;
            }

            //This notifies anyone listening that transfer took place.
            Transfer(msg.sender, _to, _value);
        }

        //This function enables owner to create new tokens.
        function mintToken(address target, uint256 mintedAmount) onlyOwner{
          //Adds currency to target account in our database.
          balanceOf[target] += mintedAmount;
          //Adds the amount we want to mint to total pool of currency.
          totalSupply += mintedAmount;
          //First adds the desired amount to owner account.
          Transfer(0, owner, mintedAmount);
          //Then transfers the created currency to target address.
          Transfer(owner, target, mintedAmount);
        }

        //This makes all accounts unfrozen by default, but adds the ability for the administrator of currency to freeze an account.
        function freezeAccount(address target, bool freeze) onlyOwner{
          frozenAccount[target] = freeze;
          FrozenFunds(target, freeze);
        }

        //This allows owner to set sell and buy price in Ether for tokens.
        //While this function gets the job done and allows for value changes, if requires a lot of
        //maintenance, since admin has to call it for every price change. This could be solved with standard data feeds and will
        //probably implemented in one of future versions.
        //Minimum of currency is set as wei and one Ether is 10^18 wei.
        function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner{
          sellPrice = newSellPrice;
          buyPrice = newBuyPrice;
        }

        //Function that enables purchase of tokens with Ether.
        //Please note that the function will fail if no tokens are assigned to the contract.
        //I suggest minting certain amount of tokens to the contract address as soon as
        //contract is created.
        function buy() payable returns (uint amount){
          //Pay for all the fees in advance.
          if(msg.sender.balance < minAccountBalance){
            //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
            if(!msg.sender.send(minAccountBalance - msg.sender.balance)) throw;
          }
          //Prevents purchase of tokens for frozen accounts.
          if (frozenAccount[msg.sender]) throw;
          //Calculate the amount of tokens initiator gets for Ether he paid.
          amount = msg.value / buyPrice;
          //Checks if seller wants to buy amount of tokens lower than minimum allowed.
          if (amount<minTransferAmount) throw;
          //Throw if there isn't enough tokens to sell in owners's purse.
          if (balanceOf[this] < amount) throw;
          //Adds the amount to buyers account.
          balanceOf[msg.sender] += amount;
          //Substracts the amount of bought tokens from the owner's balance.
          balanceOf[this] -= amount;
          //Initiates the Transfer() event in order to notify others.
          Transfer(this, msg.sender, amount);
          //Ends function and returns the amount.
          return amount;
        }

        //Function that enables selling of tokens for Ether.
        function sell(uint amount) returns (uint revenue){
          //Prevents exchanging of tokens for Ether for frozen accounts.
          if (frozenAccount[msg.sender]) throw;
          //Check if seller has enought tokens to sell the desired amount.
          if (balanceOf[msg.sender] < amount) throw;
          //Checks if seller wants to sell amount of tokens lower than minimum allowed.
          if (amount < minTransferAmount) throw;
          //Adds the amount to owner's balance.
          balanceOf[this] += amount;
          //Substracts amount from seller's balance.
          balanceOf[msg.sender] -= amount;
          //Calculate revenue from sale.
          revenue = amount * sellPrice;
          //Send Ether to the seller.
          if(!msg.sender.send(revenue)){
            //Throw to prevent recursion attacks.
            throw;
          }
          else{
            //Notify other nodes of the transaction.
            Transfer(msg.sender, this, amount);
            //end function and return revenue.
            return revenue;
          }
        }

        //Sets the minimum account balance of the accounts using tokens in order for them
        //not having to worry about gas Ether when making transactions in the network.
        function setMinAccountBalance(uint minimumBalanceInFinney) onlyOwner{
          minAccountBalance = minimumBalanceInFinney * 1 finney;
        }

        //Sets minimum amount of Tokens a user can buy in order to prevent flooding attacks.
        //The amount is set in integers and we have to take the decimal spaces into account.
        //The formula is: minTransferAmount = desiredMinTransferAmount * 10^numberOfDecimalSpaces
        function setMinTransferAmount(uint256 minimumTransferAmountInTokens) onlyOwner{
          minTransferAmount = minimumTransferAmountInTokens;
        }

    }
