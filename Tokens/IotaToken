//This is needend in order to specify the version of solidity used. Without it the code won't compile.
pragma solidity 0.4.11;

//This contract specifies the owner and main manager of the currency.
//It also defines the transfer of ownership if required.
contract owned{
  address public owner;
  //This keeps track of all the users and tells us who the admin is.
  mapping (address => bool) public isAdmin;
  //Keeps track of admin accounts.
  mapping (address => bool) public isEditor;

  function owned(){
    owner = msg.sender;
  }

  modifier onlyOwner{
    if(msg.sender != owner) throw;
    _;
  }

  //This allows for admin tiers.
  //Owner is allowed to do everything the admin is allowed to do, but not vice versa.
  modifier onlyAdmin{
    if(!(isAdmin[msg.sender] || (msg.sender == owner))) throw;
    _;
  }

  //Editor makes sure all posts acompanying donations are up to some sort of code.
  modifier onlyEditor{
    if(!(isAdmin[msg.sender] || (msg.sender == owner) || isEditor[msg.sender])) throw;
    _;
  }

  function transferOwnership (address newOwner) onlyOwner{
    owner = newOwner;
  }

  //Gives the owner power to appoint of demote new admins.
  function manageAdmins (address adminAddress, bool adminRights) onlyOwner{
    if(adminAddress != owner){
      isAdmin[adminAddress] = adminRights;
    }
  }

  //Allows owner to appoint editors.
  function manageEditors (address editorAddress, bool editorRights) onlyOwner{
    //This contitions are present to make sure owner doesn't appoint itself before transfering ownership to other position.
    if(editorAddress != owner){
      isEditor[editorAddress] = editorRights;
    }
  }
}

//ðŸ¤” === Feature in testing phase.
//ðŸ¤  === Feature tamed.
//ðŸ˜µ === Test failed.
//ðŸš§ === Under construction.

//Add and remove announcements as the administrator. ðŸ¤ 

//Administrator can edit certain announcement. ðŸ¤ 

//Streamline onlyAdmin modifier to not always demand owner is also admin, but just check if the change wants to be
//executed by owner or admin. ðŸ¤ 

//Add messages from users to the contract. ðŸ¤ 

//Make an editor admin that makes sure all messages are up to the code of conduct. ðŸ¤ 
//Ideally handled by out of BC software with access to BC.

//Implemet user silencer (if the user uses inapropriate phrases or language they should be penalised). ðŸ¤ 

//Use a function for recalculating necessary Ether reserve in stead of line of code in every function. ðŸ¤ 

//Measure the length of a message. ðŸ¤ 

//Calculate the cost of the messages based on the length of the message or some other criteria in tokens.


//In the developement instances most of the variables are public in order to provide better
//oversight and troubleshooting capabilities. This should be changed in production deployement.
//myIotaToken inherits proprieties from "owned".
contract myIotaToken is owned{
    //This maps addresses to amount of tokens they own.
    mapping (address => uint256) public balanceOf;
    //This maps addresses with permissions if they can transfer and receive funds or not.
    mapping (address => bool) public frozenAccount;
    //This maps an account as present account in the contract; the account owns or has owned tokens.
    mapping (uint256 => address) public accountRepository;
    //This allows the user to input the desired amount of tokens to buy and receive the amount of Ether needed for the purchase.
    mapping (uint256 => uint256) public priceOfTokens;
    //This allows owner of administrator to post announcements.
    mapping (uint256 => string) public announcements;
    //This allows users to send messages to the contract.
    //It could be used for collecting voluntary donations on number of occasions.
    mapping (address => string) public publicMessages;
    //Marks if the account is allowed to post or not.
    mapping (address => bool) public bannedFromPosting;
                        //Used for testing of string length capabilities.
                        mapping (address => uint) public lengthOfAMessage;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public numberOfAnnouncements;
    uint256 public sellPrice;
    uint256 public buyPrice;
    uint256 public minTransferAmount;
    uint256 public accountNumber;
    uint minAccountBalance;
    uint256 public currencyReserve;
    uint256 public currencyHoldLimit;
    address public fundsTransferTarget;
    //This is only used once at the deployement to specify if we want to present the owner in the account repository or not.
    bool public hideOwner;
    uint256 public minimumDonation;
                          //For testing purposes only.
                          uint256 public valueOfTheContract = this.balance;

    //Events are empty functions that are called to keep track of activities happening in the contract.
    //They have to start with capital letter.
    event Transfer(address indexed from, address indexed to, uint256 value);
    event FrozenFunds(address target, bool frozen);

    //This fuction is called when deploying contract.
    function myIotaToken(uint256 initialOwnerBalance, uint256 initialContractBalance, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter, uint256 minStartTransferAmount, bool omitOwner, uint256 initialReserve, uint256 initialCurrencyHoldLimit, address initialfundsTransferTargetAddress) {
        //This grants the owner of the contract the "initialOwnerBalance" of tokens.
        balanceOf[msg.sender] = initialOwnerBalance;
        //This mints tokens to the contract address in order to streamline the deployement of the contract.
        balanceOf[this] = initialContractBalance;
        //Sets the name for display purposes.
        name = tokenName;
        //Sets the amount of decimals used by this token.
        decimals = decimalUnits;
        //Sets the symbol for display purposes.
        symbol = tokenSymbol;
        //Sets owner of the contract.
        //If address is enetered at the deploy, that is the owner.
        //Otherwise owner becomes the deployer.
        if(centralMinter != 0){
          transferOwnership(centralMinter);
        }
        else{
          owner = msg.sender;
        }
        //Variable that saves total value of all tokens in order to be able to control and manage quantity and value of currency.
        totalSupply = initialOwnerBalance + initialContractBalance;
        //Defines the beginning of the account repository.
        accountNumber = 0;
        //Sets the initial minimum amount of tokens that can be transfered in the contract.
        minTransferAmount = minStartTransferAmount;
        //Lets the contract know if we want to hide the owner in the account repository or not.
        hideOwner = omitOwner;
        //Sets the initial amount of Ether that has to be present in the contract at all times.
        //Note that the reserve first has to be reached in order for the contract to hold it.
        currencyReserve = initialReserve;
        //Sets the threshold that triggers the transfer of funds from contract to the owner.
        currencyHoldLimit = initialCurrencyHoldLimit;
        //Sets the target of automatic transfer. If blank it is automatically set to owner's address.
        if(initialfundsTransferTargetAddress != 0){
          fundsTransferTarget = initialfundsTransferTargetAddress;
        }
        else{
          fundsTransferTarget = owner;
        }
        numberOfAnnouncements = 0;
        minimumDonation = 0;
    }

        //The following enables transferring of coins between peers.
        function transfer(address _to, uint256 _value){
            //Prevents flooding attacks by sending very small amount of tokens to random addresses.
            if(_value < minTransferAmount) throw;
            //Pay for all the fees in advance.
            if(msg.sender.balance < minAccountBalance){
              //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
              if(!msg.sender.send(minAccountBalance - msg.sender.balance)) throw;
            }
            //Pay for all the fees in advance.
            if(_to.balance < minAccountBalance){
              //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
              if(!_to.send(minAccountBalance - _to.balance)) throw;
            }
            //This throws the transfer if sender's account is frozen.
            if (frozenAccount[msg.sender]) throw;
            //Prevents sending tokens to frozen accounts.
            if (frozenAccount[_to]) throw;
            //This checks if sender has more funds than he wishes to send and if he wants to send amount
            //low enough that it doesn't result in overflow(value jumping back to 0).
            if(balanceOf[msg.sender] <= _value || balanceOf[_to] + _value < balanceOf[_to]){
                //"return" could also be used in stead of "throw", but throw makes sure that all of the changes initiated
                //by the contract prior to it are reversed. It unfortunately uses more gas than return.
                throw;
            }
            //This substract the token number from sender and adds it to receiver.
            balanceOf[msg.sender] -= _value;
            balanceOf[_to] += _value;
            //This notifies anyone listening that transfer took place.
            Transfer(msg.sender, _to, _value);
            //Calls entities list function.
            participatingEntities(msg.sender);
            participatingEntities(_to);
            //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
            setEtherReserve();
            //Check if there is enough Ether to trigger automatic transfer after the transaction.
            automaticTransfer();
        }

        //This function enables owner to create new tokens.
        function mintToken(address target, uint256 mintedAmount) onlyOwner{
          //Adds currency to target account in our database.
          balanceOf[target] += mintedAmount;
          //Adds the amount we want to mint to total pool of currency.
          totalSupply += mintedAmount;
          //First adds the desired amount to owner account.
          Transfer(0, owner, mintedAmount);
          //Then transfers the created currency to target address.
          Transfer(owner, target, mintedAmount);
          //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
          setEtherReserve();
          //Enters target into entities list if not already present.
          participatingEntities(target);
        }

        //This function allows admins to create new tokens to the contract address.
        //Unlike owner they can't just allocate desired amount of tokens to an address.
        function limitedMintToken(uint256 mintedAmount) internal{
          //Adds currency to target account in our database.
          balanceOf[this] += mintedAmount;
          //Adds the amount we want to mint to total pool of currency.
          totalSupply += mintedAmount;
          //First adds the desired amount to owner account.
          Transfer(0, owner, mintedAmount);
          //Then transfers the created currency to target address.
          Transfer(owner, this, mintedAmount);
        }

        //This makes all accounts unfrozen by default, but adds the ability for the administrator of currency to freeze an account.
        function freezeAccount(address target, bool freeze) onlyAdmin{
          frozenAccount[target] = freeze;
          FrozenFunds(target, freeze);
        }

        //This allows owner to set sell and buy price in Ether for tokens.
        //While this function gets the job done and allows for value changes, if requires a lot of
        //maintenance, since admin has to call it for every price change. This could be solved with standard data feeds and will
        //probably implemented in one of future versions.
        //Minimum of currency is set as wei and one Ether is 10^18 wei.
        //I suggest that tokenValuesToMap is always the same in order to not leave some older mappings unchanged.
        function setPrices(uint256 newSellPrice, uint256 newBuyPrice/*, uint256 tokenValuesToMap*/) onlyAdmin{
          sellPrice = newSellPrice;
          buyPrice = newBuyPrice;
          //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
          setEtherReserve();
          //The following for sentence alows for mapping the price to desired amount of tokens to buy.
          //Unfortunately even mapping the prices for 100 tokens costs twice as much as whole contract deploy and is unviable in final deploy.
          //for(uint256 i=0;i<tokenValuesToMap;i++){
          //  priceOfTokens[i]=i*newBuyPrice;
          //}
        }

        //Function that enables purchase of tokens with Ether.
        //Please note that the function will fail if no tokens are assigned to the contract.
        //I suggest minting certain amount of tokens to the contract address as soon as
        //contract is created.
        function buy() payable returns (uint amount){
          //Pay for all the fees in advance.
          if(msg.sender.balance < minAccountBalance){
            //if() clause has to be used for safety purposes and if transaction can't be completed the whole transaction fails.
            if(!msg.sender.send(minAccountBalance - msg.sender.balance)) throw;
          }
          //Prevents purchase of tokens for frozen accounts.
          if (frozenAccount[msg.sender]) throw;
          //Calculate the amount of tokens initiator gets for Ether he paid.
          amount = msg.value / buyPrice;
          //Checks if seller wants to buy amount of tokens lower than minimum allowed.
          if (amount<minTransferAmount) throw;
          //Mint new tokens to the contract address if there isn't enough tokens to sell in contract's purse.
          if (balanceOf[this] < amount){
            limitedMintToken(amount);
          }
          //Adds the amount to buyers account.
          balanceOf[msg.sender] += amount;
          //Substracts the amount of bought tokens from the owner's balance.
          balanceOf[this] -= amount;
          //Initiates the Transfer() event in order to notify others.
          Transfer(this, msg.sender, amount);
                              //Delete when done testing.
                              valueOfTheContract = this.balance;
          //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
          setEtherReserve();
          //Check if there is enough Ether to trigger automatic transfer after the transaction.
          automaticTransfer();
          //Add the buyer to the entitites list.
          participatingEntities(msg.sender);
          //Ends function and returns the amount.
          return amount;
        }

        //Function that enables selling of tokens for Ether.
        function sell(uint amount) returns (uint revenue){
          //Prevents exchanging of tokens for Ether for frozen accounts.
          if (frozenAccount[msg.sender]) throw;
          //Check if seller has enought tokens to sell the desired amount.
          if (balanceOf[msg.sender] < amount) throw;
          //Checks if seller wants to sell amount of tokens lower than minimum allowed.
          if (amount < minTransferAmount) throw;
          //Calculate revenue from sale.
          revenue = amount * sellPrice;
          //Check if the contract holds enough Ether to pay the user for all of the Tokens.
          if(this.balance>revenue){
            //Adds the amount to owner's balance.
            balanceOf[this] += amount;
            //Substracts amount from seller's balance.
            balanceOf[msg.sender] -= amount;
            //Send Ether to the seller.
            if(!msg.sender.send(revenue)){
              //Throw to prevent recursion attacks.
              throw;
            }
            else{
              //Notify other nodes of the transaction.
              Transfer(msg.sender, this, amount);
              //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
              setEtherReserve();
              //Check if there is enough Ether to trigger automatic transfer after the transaction.
              //While it may appear a bit odd to add this into the sell function, there could be some Ether
              //sent direclty to the contract and therefore wouldnt be picked up by buy() or transfer().
              automaticTransfer();
              //Adds seller to the entitites list.
              participatingEntities(msg.sender);
              //end function and return revenue.
              return revenue;
            }
          }
          //If there isn't enough Ether to pay for all the Tokens, pay for as many as you can and return the leftover Tokens.
          else{
            //Pay as much as you can.
            revenue = this.balance;
            //Calculate the amount of tokens you can pay for.
            amount = revenue / sellPrice;
            //Calculate the new contract and user Token values.
            balanceOf[this] += amount;
            balanceOf[msg.sender] -= amount;
            //Send Ether to the seller.
            if(!msg.sender.send(revenue)){
              //Throw to prevent recursion attacks.
              throw;
            }
            else{
              //Notify other nodes of the transaction.
              Transfer(msg.sender, this, amount);
              //Calculate the reserve of Ether necessary to buy back all of the tokens present in the network that aren't owned by the contract.
              setEtherReserve();
              //Check if there is enough Ether to trigger automatic transfer after the transaction.
              //While it may appear a bit odd to add this into the sell function, there could be some Ether
              //sent direclty to the contract and therefore wouldnt be picked up by buy() or transfer().
              //end function and return revenue.
              automaticTransfer();
              //Adds seller to the entitites list.
              participatingEntities(msg.sender);
              //end function and return revenue.
              return revenue;
            }
          }
        }

        //Sets the minimum account balance of the accounts using tokens in order for them
        //not having to worry about gas Ether when making transactions in the network.
        function setMinAccountBalance(uint minimumBalanceInFinney) onlyAdmin{
          minAccountBalance = minimumBalanceInFinney * 1 finney;
        }

        //Sets minimum amount of Tokens a user can buy in order to prevent flooding attacks.
        //The amount is set in integers and we have to take the decimal spaces into account.
        //The formula is: minTransferAmount = desiredMinTransferAmount * 10^numberOfDecimalSpaces
        function setMinTransferAmount(uint256 minimumTransferAmountInTokens) onlyAdmin{
          minTransferAmount = minimumTransferAmountInTokens;
        }

        //This function sets how much Ether can contract hold before transfering some to owners account.
        //It can also be used to target a specific wallet address if user doesn't want Ether to be automatically sent
        //to their account.
        //Every time user sets the transfer threshold they must specify the target address if they don't want for
        //the contract to use their own address.
        //Please note that both threshold as well as reserve have to be computed in wei (10^-18 Ether).
        function setThresholdTransferValue(uint256 threshold, uint256 reserve, address targetAddress) onlyOwner{
        //To keep automatically calculated reserve if we don't change the value.
        if(reserve != 0){
          currencyReserve = reserve;
        }
        currencyHoldLimit = threshold;
          if(targetAddress != 0){
            fundsTransferTarget = targetAddress;
          }
        }

        //Enables the admin to retrieve funds from the contract.
        function retrieveFunds(uint256 amountToRetrieveInWei) onlyOwner{
          if(amountToRetrieveInWei > (this.balance - currencyReserve)){
            if(!fundsTransferTarget.send(this.balance - currencyReserve)){
              throw;
            }
          }
          else{
            if(!fundsTransferTarget.send(amountToRetrieveInWei)){
              throw;
            }
          }
        }

        //Function that powers the automatic retrieval of funds.
        function automaticTransfer() internal{
          //First check if the automatic transfer conditions are met.
          if(this.balance > currencyHoldLimit){
            if(!fundsTransferTarget.send(this.balance - currencyReserve)){
              throw;
            }
          }
        }

        //Function that builds the participating entities table.
        function participatingEntities(address entity) internal{
          //Makes sure we don't have duplicate addresses in the repository.
          bool isNotAnExistingAccount = true;
          //Following line allows us to omit the owner of the contract form the account repository.
          if(entity == owner) isNotAnExistingAccount = !hideOwner;
          for(uint i=0; i<accountNumber+1; i++){
            if(accountRepository[i]==entity){
              isNotAnExistingAccount = false;
            }
          }
          if(isNotAnExistingAccount){
            accountNumber+=1;
            accountRepository[accountNumber] = entity;
            //Makes sure no user is admin by accident.
            if(entity != owner && !(isAdmin[entity] == true)){
              isAdmin[entity] = false;
            }
          }
        }

        function setEtherReserve() internal{
          currencyReserve = (totalSupply - balanceOf[this]) * sellPrice;
        }

        //This is a fallback function and allows the owner to send Ether to the contract without having to
        //call some other actions in post 0.4.0 Solidity.
        function () payable{}

        //Allows admin to create announcements.
        function createAnnouncement(string announcementText) onlyAdmin{
          numberOfAnnouncements += 1;
          announcements[numberOfAnnouncements] = announcementText;
        }

        //Allows admin to remove an announcement and reorders other announcements, so that we don't have any empty spaces.
        function removeAnnouncement(uint256 announcementNumber) onlyAdmin{
          for(uint256 i=announcementNumber; i<=numberOfAnnouncements; i++){
            announcements[i]=announcements[i+1];
          }
          numberOfAnnouncements -= 1;
        }

        //Gives admin ability to edit announcements.
        function editAnnouncement (uint256 announcementNumber, string announcementText) onlyAdmin{
          announcements[announcementNumber] = announcementText;
        }

        //Allows users to post messages to the message board.
        function postMessage (string messageToPost, uint256 donation){
          if(bannedFromPosting[msg.sender]){
            throw;
          }
          else{
            if((donation >= minimumDonation) || (minimumDonation == 0)){
              publicMessages[msg.sender] = messageToPost;
              lengthOfAMessage[msg.sender] = bytes(messageToPost).length;
              balanceOf[msg.sender] -= donation;
              balanceOf[this] += donation;
              setEtherReserve();
            }
            else{
              throw;
            }
          }
        }

        //Disables ability of a user to post.
        function banUserFromPosting (address addressToBan, bool ban) onlyEditor{
          bannedFromPosting[addressToBan] = ban;
        }

        //Sets minimum donation amount for message posts.
        //Please keep in mind that Ethereum doesn't know floating point and you have to padd the value with 0 accordingly.
        function setMinimumDonations (uint256 newMinimumDonation) onlyAdmin{
          minimumDonation = newMinimumDonation;
        }
    }
